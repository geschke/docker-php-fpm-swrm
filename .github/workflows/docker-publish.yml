#name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

#on:
  #schedule:
  #  - cron: '42 9 * * *'
#  push:
#    branches: 
#      - main
    # Publish semver tags as releases. 
    # Every release in a branch will be tagged, so it is not necessary to specify additional branches.
    #tags: [ 'v*.*.*' ]
#    tags: 
#      - 'v*'
#  pull_request:
#    branches: [ main ]

#env:
  # Use GitHub Container Repository
#  REGISTRY_GITHUB: ghcr.io

  # Use docker.io for Docker Hub if empty
#  REGISTRY_DOCKER_HUB: docker.io

  # github.repository as <account>/<repo>
#  IMAGE_NAME: geschke/php-fpm-swrm
  # was: ${{ github.repository }}
  # GitHub repository is named as "docker-<image_name>" to differ Docker images from other contents


#jobs:
#  build:

#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write

#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3

#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v2

#      - name: Inspect builder
#        run: |
#          echo "Name:      ${{ steps.buildx.outputs.name }}"
#          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
#          echo "Status:    ${{ steps.buildx.outputs.status }}"
#          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
#          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
#          echo "image name: ${{ env.IMAGE_NAME }}"

      # Login against an container registry except on PR
      # https://github.com/docker/login-action
      
      # Login to GitHub Container Repository
#      - name: Log into registry ${{ env.REGISTRY_GITHUB }}
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          registry: ${{ env.REGISTRY_GITHUB }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

      # Login to Docker Hub (default when no registry variable exists)
#      - name: Login to DockerHub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      
 #     - name: Extract Docker metadata
 #       id: meta
 #       uses: docker/metadata-action@v4
 #       with:
 #         tags: |
 #           type=raw,value=latest,enable=${{ endsWith(GitHub.ref, 'main') }}
 #           type=match,pattern=v(.*),group=1
 #         flavor: |
 #           latest=false
 #         images: ${{ env.REGISTRY_DOCKER_HUB }}/${{ env.IMAGE_NAME }},${{ env.REGISTRY_GITHUB }}/${{ env.IMAGE_NAME }}

 #     - name: Show some information after meta run
 #       id: showinfo
 #       run: |
 #         echo "GitHub event name:  ${{ github.event_name }}"
 #         echo "Tags:               ${{ steps.meta.outputs.tags }}"
 #         echo "Labels:             ${{ steps.meta.outputs.labels }}"
 #         echo "Image name: ${{ env.IMAGE_NAME }}"


      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
  #    - name: Build and push Docker image
  #      uses: docker/build-push-action@v4
  #      with:
  #        context: .
  #        push: ${{ github.event_name != 'pull_request' }}
  #        tags: ${{ steps.meta.outputs.tags }}
  #        labels: ${{ steps.meta.outputs.labels }}

#name: Docker Build and Push

#on:
#  push:
#    branches:
#      - main

#env:
#  # Registries for Docker Hub and GitHub Container Registry
#  REGISTRY_GITHUB: ghcr.io
#  REGISTRY_DOCKER_HUB: docker.io

#jobs:
#  build:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write

#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2

#      - name: Log into GitHub Container Registry
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          registry: ${{ env.REGISTRY_GITHUB }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: Log into Docker Hub
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}

#      - name: Load image mappings and set IMAGE_NAME
#        run: |
#          source ./image_mappings.sh
#          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
#          echo "Image name: $IMAGE_NAME"

#      - name: Build and Push Docker Images
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          push: false
#          # ${{ github.event_name != 'pull_request' }}
#          tags: |
#            ${{ env.REGISTRY_DOCKER_HUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
#            ${{ env.REGISTRY_GITHUB }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
#          platforms: linux/amd64,linux/arm64


name: Docker Build and Push

on:
  push:
    branches:
      - main

env:
  # Registries for Docker Hub and GitHub Container Registry
  REGISTRY_GITHUB: ghcr.io
  REGISTRY_DOCKER_HUB: docker.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry (GHCR)
      - name: Log into GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Log in to Docker Hub
      - name: Log into Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Load the image mappings and set IMAGE_NAME
      - name: Load image mappings and define IMAGE_NAME
        id: load_mappings
        run: |
          source ./image_mappings.sh
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # Check if Docker tag already exists on Docker Hub
      - name: Check if Docker tag exists on Docker Hub
        id: tag_exists_dockerhub
        run: |
          TAG_EXISTS=$(curl -s https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/?page_size=100 | jq -r '.results[] | select(.name == "'${{ steps.load_mappings.outputs.tag }}'") | .name')
          if [ "$TAG_EXISTS" == "${{ steps.load_mappings.outputs.tag }}" ]; then
            echo "Tag $TAG_EXISTS already exists on Docker Hub. Skipping push."
            echo "DOCKERHUB_TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag does not exist on Docker Hub. Proceeding with push."
            echo "DOCKERHUB_TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # Check if Docker tag exists on GitHub Container Registry (GHCR)
      - name: Check if Docker tag exists on GHCR
        id: tag_exists_ghcr
        run: |
          TAG_EXISTS=$(curl -s -u ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} https://ghcr.io/v2/${{ github.repository }}/tags/list | jq -r '.tags[]' | grep "${{ steps.load_mappings.outputs.tag }}" || true)
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag $TAG_EXISTS already exists on GHCR. Skipping push."
            echo "GHCR_TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Tag does not exist on GHCR. Proceeding with push."
            echo "GHCR_TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # Perform a Dry-Run (Build but do not push) if the tags don't already exist
      - name: Build Docker Images (Dry Run)
        if: env.DOCKERHUB_TAG_EXISTS == 'false' && env.GHCR_TAG_EXISTS == 'false'
        run: |
          source ./image_mappings.sh

          # Iterate over the defined directories
          for dir in "${!images[@]}"; do
            tag=${images[$dir]}

            # Read version from version.txt
            version_file="./$dir/version.txt"
            if [[ -f "$version_file" ]]; then
              version=$(cat "$version_file")
            else
              echo "Error: No version.txt found in $dir."
              exit 1
            fi

            # Full image tag, with version appended via hyphen
            full_tag="${tag}-${version}"

            # Copy install-composer.sh to the directory before building the image
            cp ./install-composer.sh ./$dir/
            if [[ $? -ne 0 ]]; then
              echo "Error copying install-composer.sh to $dir"
              exit 1
            fi

            # Build the Docker image with Dry Run (no push)
            docker buildx build --platform linux/amd64,linux/arm64 \
              -t "$REGISTRY_DOCKER_HUB/$IMAGE_NAME:$full_tag" \
              -t "$REGISTRY_GITHUB/$IMAGE_NAME:$full_tag" \
              --push=false ./$dir

            # Clean up: Remove install-composer.sh from the directory
            rm ./$dir/install-composer.sh

            # Simulate push by outputting the commands (this is just a log, no actual push happens)
            echo "Dry Run completed for $IMAGE_NAME:$full_tag"
            echo "Push command would be:"
            echo "docker push $REGISTRY_DOCKER_HUB/$IMAGE_NAME:$full_tag"
            echo "docker push $REGISTRY_GITHUB/$IMAGE_NAME:$full_tag"
          done
